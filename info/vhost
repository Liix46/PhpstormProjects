Разработка серверный приложений
PHP - Hypertext Preprocessor

PHP - язык интерпретирующего типа (REPL)
REPL — форма организации простой интерактивной среды программирования в рамках средств интерфейса командной строки.
(REPL - Read-Eval-Print-Loop)
 код остается исходным кодом, доп. файлов
 (типа EXE не создается)

 PHP существует в 2-х вариантах установки
 (функционирования) - командная строка и
 Mod-PHP, в котором он является модулем сервера Apache.

 В режиме командной строки - скачиваются c www.php.net,
 распаковывается в любую папку,
 дальше запускается через
 php.exe [options]
 ./php.exe -r "echo 'Hello';"
 php -r "print('Hello');"

 В режиме Mod-PHP устанавливается вместе с Apache
 часто в виде сборок (+СУБД) - XAMPP, OpenServer
 Этот способ рекомендуется для веб-разработки.

 Проверка - переход в браузере на http:localhost
 it works! - стандарт на Apache
 XAMPP - стартовая страница

 Редакторы на PHP: поскоольку сборки/компиляции
 нет, спец. IDE не являются необходимыми, подходят обычные
 текстовые редакторы.
 IDE могут понадобиться для отладки.
 Наиболее популярна - PHPStorm.Она платная

 PHP придерживается при появлении идеи "Второго языка",
 то есть переход на PHP должен был быть удобный для всех,
 независимо от предыдущего опыта.
 Поэтому в PHP очень много дублирующихся операторов,
 присутствуют разные варианты оформления кода
 Например (см стр 17-18)

 ./php.exe -r "echo 'Hello';" - операторный вид
 php -r "print('Hello');" - функциональный вид

 Например, хоть язык и регистрозависимый, но ряд
 констант перегружен в разном регистре
 true, True, TRUE

 -------------------
 Основы синтаксиса (Далее Mod-PHP, если не указано другое)
 Язык PHP - настройка над HTML. Это значит, что
 валидный HTML документ можно переименовать в .php
 и он будет успешно проработан Apache. В этом смысле он похож
 на JSP / Razor.

 Сами коды PHP вставляются при помощи тегов
 <?php  ?> либо в сокращенном варианте
 (если этот вариант разрешен в настройках): <? ?>
 Специальные теги подстановки выражений <?= ?>
 Если весь документ - это код PHP, то закрывающий тег
 не требуется, более того, не рекомендуется ( если
 после закрытого тега оставить пробел или разрыв строки,
 то Apache перейдет в режим отправки ответа и
 включит этот символ в него.
 Также следует обращать внимание на то,
 что открывающий тег идет первым символом )

 Больщенство функций и операторов PHP находятся в
 глобольной видимости, из-за этого для освобождения имен переменных они
 обязаны начинаться с символа "$":
 $x $const for($i=0; $i<10; $i++) {...}

 Типизация - динамическая, похожа на JS. Описание переменных
 не требуется, они появляются при первом присваивании
 Типа "undefined" нет, проверка наличия переменной -
 isset($x), isset($arr[2])
 разрушение переменной - unset($x)

 о строках:
 '' - константные строки, в них переменные не подставляются
 "" - строки с подстановкой переменных
 для записи больших строк:
 $str = <<<SQL // SQL маркер (любой, по правилам имен)
 SELECT // Любой текст
 *      //
 FROM   //
 table_$n // переменные вычисляются (подставляются)
 SQL:     // !! маркер с начала строки, в конце ";"
 !! популярные ошибки: конечный маркер не с начала строки,
 не содержит "\n" или содержит пробелы
 Для подстановки более сложных выражений
 ${arr[$x+1]}  {$arr[$x+1]}
 Для константных строк маркер берется в '': <<<'SQL'

 !! Для конкатанации строк применяется оператор "."
 $str = "Hello" . " World";
 $str .= "!!";
 !! Оператор "+" работает только с числами

 ---------
 Массивы
 Конструктор массива:
 $arr1 = array() ;  // старый синтаксис
 $arr2 = [] ;       // новый, разницы нет (только совместимость)
 Добавление элемента в массива
 в конец
 $arr1[] = "Hello" ;
 $arr1[] = "World" ;
 $arr1[] = 2;
 по индексу (в РНР все массивы ассоциативные)
 $arr1[4] = "4" ;
 $arr1[-4] = "-4" ;
 $arr1["index"] = "the index" ;
 Для контроля значений в массиве его можно вывести
 отладочной функцией print_r. Для наглядности вывод
 сопровождают тегом сохранения форматирования <pre>:
 echo "<pre>" ; print_r( $arr1 ) ;

 ------------
 Виртуальный хостинг Apache
 Хостинг - размещение нескольких сайтов на одном физическом ресурсе (ПК).
 Виртуальный - сервер один, обслуживает несколько сайтов;
 не в реальной сети, а в локальной петле.

 Реализация:
 1 Для каждого виртуального сайта создаем папки,
 традиционно, имена папок совпадают с именем сайта
 (желательно, избегать в пути русских символов)
  1.1 Для каждого вмртуального сайта создаем папки:
    www (web / http) - для самого сайта
    log - для информации от сервера (создаем пустую)

 2 Конфигурация Apache

 2.1 Файл: /Applications/MAMP/conf/apache/httpd.conf - раскомментируем или
    убеждаемся в наличие строки
    Include /Applications/MAMP/conf/apache/extra/httpd-vhosts.conf
 2.2. файл: /conf/apache/extra/httpd-vhosts.conf
 Для каждого виртуального сайта создаем определение:
 <VirtualHost *:80> #endpoint, вариация 127.0.0.1:80
     ServerAdmin webmaster@localhost ## требуется, выдается в составе ошибок
     ServerName basics.local ## url сайта (host: -заголовок)
     ServerAlias www.basics.local ## псевдоним
     DocumentRoot "/Users/apple/basics.local/www"
     ErrorLog "/Users/apple/basics.local/log/error_log"
     CustomLog "/Users/apple/basics.local/log/access_log" common
     <Directory "/Users/apple/basics.local/www">
         AllowOverride All ## переопределять конфигурации в каждой папке
         Require all granted ## общий доступ (без авторизации)
     </Directory>
</VirtualHost>

#Listen 12.34.56.78:80
Listen 8888
2.3. Перезапустить Apache. В случае успеха он перезапустится
и в подпапках log  появятся файлы .log

3 DNS - локальная маршрутизация
    Открываем файл /private/etc/hosts
    Для каждого сайта и псевдонима добавляем маршрут
    127.0.0.1 	basics.local
    127.0.0.1 	www.basics.local






 <?php
 $x = 10;
 for($i=0; $i<$x; $i++)
 {
     print($i);
 }

 echo "<b>Hello, world! $x<b>";
